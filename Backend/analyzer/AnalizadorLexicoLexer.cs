//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AnalizadorLexico.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AnalizadorLexicoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, NEWLINE=27, INT=28, DECIMAL=29, CARACTER=30, CADENA=31, 
		BOOL=32, PALABRA=33, COMENTARIO_LINEA=34, COMENTARIO=35, IGUAL=36, DOSPUNTOS_IGUAL=37, 
		PARENTESIS_ABRE=38, PARENTESIS_CIERRA=39, ASIGNACION_SUMA=40, ASIGNACION_RESTA=41;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "NEWLINE", "INT", "DECIMAL", "CARACTER", "ESC_SEQ", "CADENA", 
		"ESC_SEQCA", "BOOL", "PALABRA", "COMENTARIO_LINEA", "COMENTARIO", "IGUAL", 
		"DOSPUNTOS_IGUAL", "PARENTESIS_ABRE", "PARENTESIS_CIERRA", "ASIGNACION_SUMA", 
		"ASIGNACION_RESTA"
	};


	public AnalizadorLexicoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AnalizadorLexicoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println'", "'var'", "'int'", "'float64'", "'string'", "'bool'", 
		"'rune'", "'if'", "'then'", "'end if'", "'['", "']'", "'-'", "'*'", "'/'", 
		"'+'", "'%'", "'&&'", "'||'", "'!'", "'=='", "'!='", "'>='", "'>'", "'<='", 
		"'<'", null, null, null, null, null, null, null, null, null, "'='", "':='", 
		"'('", "')'", "'+='", "'-='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "NEWLINE", "INT", "DECIMAL", "CARACTER", "CADENA", "BOOL", 
		"PALABRA", "COMENTARIO_LINEA", "COMENTARIO", "IGUAL", "DOSPUNTOS_IGUAL", 
		"PARENTESIS_ABRE", "PARENTESIS_CIERRA", "ASIGNACION_SUMA", "ASIGNACION_RESTA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnalizadorLexico.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorLexicoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,41,297,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,
		8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
		13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
		19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,
		24,1,25,1,25,1,26,4,26,187,8,26,11,26,12,26,188,1,26,1,26,1,27,4,27,194,
		8,27,11,27,12,27,195,1,28,4,28,199,8,28,11,28,12,28,200,1,28,1,28,4,28,
		205,8,28,11,28,12,28,206,1,29,1,29,1,29,3,29,212,8,29,1,29,1,29,1,30,1,
		30,1,30,1,31,1,31,1,31,5,31,222,8,31,10,31,12,31,225,9,31,1,31,1,31,1,
		32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,241,8,33,
		1,34,4,34,244,8,34,11,34,12,34,245,1,34,3,34,249,8,34,1,34,4,34,252,8,
		34,11,34,12,34,253,3,34,256,8,34,1,35,1,35,1,35,1,35,5,35,262,8,35,10,
		35,12,35,265,9,35,1,35,1,35,1,36,1,36,1,36,1,36,5,36,273,8,36,10,36,12,
		36,276,9,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,
		1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,274,0,43,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
		18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
		30,61,0,63,31,65,0,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,
		40,85,41,1,0,8,3,0,9,10,13,13,32,32,1,0,48,57,4,0,10,10,13,13,39,39,92,
		92,6,0,39,39,92,92,98,98,110,110,114,114,116,116,4,0,10,10,13,13,34,34,
		92,92,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,2,0,
		65,90,97,122,2,0,10,10,13,13,308,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
		7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
		0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
		29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
		0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
		0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,63,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,
		1,0,0,0,3,99,1,0,0,0,5,103,1,0,0,0,7,107,1,0,0,0,9,115,1,0,0,0,11,122,
		1,0,0,0,13,127,1,0,0,0,15,132,1,0,0,0,17,135,1,0,0,0,19,140,1,0,0,0,21,
		147,1,0,0,0,23,149,1,0,0,0,25,151,1,0,0,0,27,153,1,0,0,0,29,155,1,0,0,
		0,31,157,1,0,0,0,33,159,1,0,0,0,35,161,1,0,0,0,37,164,1,0,0,0,39,167,1,
		0,0,0,41,169,1,0,0,0,43,172,1,0,0,0,45,175,1,0,0,0,47,178,1,0,0,0,49,180,
		1,0,0,0,51,183,1,0,0,0,53,186,1,0,0,0,55,193,1,0,0,0,57,198,1,0,0,0,59,
		208,1,0,0,0,61,215,1,0,0,0,63,218,1,0,0,0,65,228,1,0,0,0,67,240,1,0,0,
		0,69,243,1,0,0,0,71,257,1,0,0,0,73,268,1,0,0,0,75,282,1,0,0,0,77,284,1,
		0,0,0,79,287,1,0,0,0,81,289,1,0,0,0,83,291,1,0,0,0,85,294,1,0,0,0,87,88,
		5,102,0,0,88,89,5,109,0,0,89,90,5,116,0,0,90,91,5,46,0,0,91,92,5,80,0,
		0,92,93,5,114,0,0,93,94,5,105,0,0,94,95,5,110,0,0,95,96,5,116,0,0,96,97,
		5,108,0,0,97,98,5,110,0,0,98,2,1,0,0,0,99,100,5,118,0,0,100,101,5,97,0,
		0,101,102,5,114,0,0,102,4,1,0,0,0,103,104,5,105,0,0,104,105,5,110,0,0,
		105,106,5,116,0,0,106,6,1,0,0,0,107,108,5,102,0,0,108,109,5,108,0,0,109,
		110,5,111,0,0,110,111,5,97,0,0,111,112,5,116,0,0,112,113,5,54,0,0,113,
		114,5,52,0,0,114,8,1,0,0,0,115,116,5,115,0,0,116,117,5,116,0,0,117,118,
		5,114,0,0,118,119,5,105,0,0,119,120,5,110,0,0,120,121,5,103,0,0,121,10,
		1,0,0,0,122,123,5,98,0,0,123,124,5,111,0,0,124,125,5,111,0,0,125,126,5,
		108,0,0,126,12,1,0,0,0,127,128,5,114,0,0,128,129,5,117,0,0,129,130,5,110,
		0,0,130,131,5,101,0,0,131,14,1,0,0,0,132,133,5,105,0,0,133,134,5,102,0,
		0,134,16,1,0,0,0,135,136,5,116,0,0,136,137,5,104,0,0,137,138,5,101,0,0,
		138,139,5,110,0,0,139,18,1,0,0,0,140,141,5,101,0,0,141,142,5,110,0,0,142,
		143,5,100,0,0,143,144,5,32,0,0,144,145,5,105,0,0,145,146,5,102,0,0,146,
		20,1,0,0,0,147,148,5,91,0,0,148,22,1,0,0,0,149,150,5,93,0,0,150,24,1,0,
		0,0,151,152,5,45,0,0,152,26,1,0,0,0,153,154,5,42,0,0,154,28,1,0,0,0,155,
		156,5,47,0,0,156,30,1,0,0,0,157,158,5,43,0,0,158,32,1,0,0,0,159,160,5,
		37,0,0,160,34,1,0,0,0,161,162,5,38,0,0,162,163,5,38,0,0,163,36,1,0,0,0,
		164,165,5,124,0,0,165,166,5,124,0,0,166,38,1,0,0,0,167,168,5,33,0,0,168,
		40,1,0,0,0,169,170,5,61,0,0,170,171,5,61,0,0,171,42,1,0,0,0,172,173,5,
		33,0,0,173,174,5,61,0,0,174,44,1,0,0,0,175,176,5,62,0,0,176,177,5,61,0,
		0,177,46,1,0,0,0,178,179,5,62,0,0,179,48,1,0,0,0,180,181,5,60,0,0,181,
		182,5,61,0,0,182,50,1,0,0,0,183,184,5,60,0,0,184,52,1,0,0,0,185,187,7,
		0,0,0,186,185,1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,
		189,190,1,0,0,0,190,191,6,26,0,0,191,54,1,0,0,0,192,194,7,1,0,0,193,192,
		1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,56,1,0,0,0,
		197,199,7,1,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,
		1,0,0,0,201,202,1,0,0,0,202,204,5,46,0,0,203,205,7,1,0,0,204,203,1,0,0,
		0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,58,1,0,0,0,208,211,
		5,39,0,0,209,212,3,61,30,0,210,212,8,2,0,0,211,209,1,0,0,0,211,210,1,0,
		0,0,212,213,1,0,0,0,213,214,5,39,0,0,214,60,1,0,0,0,215,216,5,92,0,0,216,
		217,7,3,0,0,217,62,1,0,0,0,218,223,5,34,0,0,219,222,3,65,32,0,220,222,
		8,4,0,0,221,219,1,0,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,
		0,223,224,1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,227,5,34,0,0,227,
		64,1,0,0,0,228,229,5,92,0,0,229,230,7,5,0,0,230,66,1,0,0,0,231,232,5,116,
		0,0,232,233,5,114,0,0,233,234,5,117,0,0,234,241,5,101,0,0,235,236,5,102,
		0,0,236,237,5,97,0,0,237,238,5,108,0,0,238,239,5,115,0,0,239,241,5,101,
		0,0,240,231,1,0,0,0,240,235,1,0,0,0,241,68,1,0,0,0,242,244,7,6,0,0,243,
		242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,1,
		0,0,0,247,249,5,95,0,0,248,247,1,0,0,0,248,249,1,0,0,0,249,255,1,0,0,0,
		250,252,7,1,0,0,251,250,1,0,0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,
		1,0,0,0,254,256,1,0,0,0,255,251,1,0,0,0,255,256,1,0,0,0,256,70,1,0,0,0,
		257,258,5,47,0,0,258,259,5,47,0,0,259,263,1,0,0,0,260,262,8,7,0,0,261,
		260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,1,
		0,0,0,265,263,1,0,0,0,266,267,6,35,1,0,267,72,1,0,0,0,268,269,5,47,0,0,
		269,270,5,42,0,0,270,274,1,0,0,0,271,273,9,0,0,0,272,271,1,0,0,0,273,276,
		1,0,0,0,274,275,1,0,0,0,274,272,1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,
		0,277,278,5,42,0,0,278,279,5,47,0,0,279,280,1,0,0,0,280,281,6,36,1,0,281,
		74,1,0,0,0,282,283,5,61,0,0,283,76,1,0,0,0,284,285,5,58,0,0,285,286,5,
		61,0,0,286,78,1,0,0,0,287,288,5,40,0,0,288,80,1,0,0,0,289,290,5,41,0,0,
		290,82,1,0,0,0,291,292,5,43,0,0,292,293,5,61,0,0,293,84,1,0,0,0,294,295,
		5,45,0,0,295,296,5,61,0,0,296,86,1,0,0,0,15,0,188,195,200,206,211,221,
		223,240,245,248,253,255,263,274,2,0,1,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
