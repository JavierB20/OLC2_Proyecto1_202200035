//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AnalizadorLexico.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AnalizadorLexicoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		NEWLINE=10, INT=11, DECIMAL=12, CARACTER=13, CADENA=14, BOOL=15, ID=16, 
		COMENTARIO_LINEA=17, COMENTARIO_BLOQUE=18, IGUAL=19, DOSPUNTOS_IGUAL=20, 
		PARENTESIS_ABRE=21, PARENTESIS_CIERRA=22, CORCHETE_ABRE=23, CORCHETE_CIERRA=24, 
		LLAVE_ABRE=25, LLAVE_CIERRA=26, ASIGNACION_SUMA=27, ASIGNACION_RESTA=28, 
		MAS=29, MENOS=30, MULT=31, DIV=32, MODULO=33, Y_LOGICO=34, O_LOGICO=35, 
		NEGACION=36, IGUAL_IGUAL=37, DIFERENTE=38, MAYOR_IGUAL=39, MAYOR=40, MENOR_IGUAL=41, 
		MENOR=42;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"NEWLINE", "INT", "DECIMAL", "ESC_SEQ", "CARACTER", "CADENA", "BOOL", 
		"ID", "COMENTARIO_LINEA", "COMENTARIO_BLOQUE", "IGUAL", "DOSPUNTOS_IGUAL", 
		"PARENTESIS_ABRE", "PARENTESIS_CIERRA", "CORCHETE_ABRE", "CORCHETE_CIERRA", 
		"LLAVE_ABRE", "LLAVE_CIERRA", "ASIGNACION_SUMA", "ASIGNACION_RESTA", "MAS", 
		"MENOS", "MULT", "DIV", "MODULO", "Y_LOGICO", "O_LOGICO", "NEGACION", 
		"IGUAL_IGUAL", "DIFERENTE", "MAYOR_IGUAL", "MAYOR", "MENOR_IGUAL", "MENOR"
	};


	public AnalizadorLexicoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AnalizadorLexicoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println'", "'var'", "'int'", "'float64'", "'string'", "'bool'", 
		"'rune'", "'if'", "'else'", null, null, null, null, null, null, null, 
		null, null, "'='", "':='", "'('", "')'", "'['", "']'", "'{'", "'}'", "'+='", 
		"'-='", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'=='", 
		"'!='", "'>='", "'>'", "'<='", "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "NEWLINE", 
		"INT", "DECIMAL", "CARACTER", "CADENA", "BOOL", "ID", "COMENTARIO_LINEA", 
		"COMENTARIO_BLOQUE", "IGUAL", "DOSPUNTOS_IGUAL", "PARENTESIS_ABRE", "PARENTESIS_CIERRA", 
		"CORCHETE_ABRE", "CORCHETE_CIERRA", "LLAVE_ABRE", "LLAVE_CIERRA", "ASIGNACION_SUMA", 
		"ASIGNACION_RESTA", "MAS", "MENOS", "MULT", "DIV", "MODULO", "Y_LOGICO", 
		"O_LOGICO", "NEGACION", "IGUAL_IGUAL", "DIFERENTE", "MAYOR_IGUAL", "MAYOR", 
		"MENOR_IGUAL", "MENOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnalizadorLexico.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorLexicoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,42,283,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,
		8,1,8,1,9,4,9,142,8,9,11,9,12,9,143,1,9,1,9,1,10,4,10,149,8,10,11,10,12,
		10,150,1,11,4,11,154,8,11,11,11,12,11,155,1,11,1,11,4,11,160,8,11,11,11,
		12,11,161,1,12,1,12,1,12,1,13,1,13,1,13,3,13,170,8,13,1,13,1,13,1,14,1,
		14,1,14,5,14,177,8,14,10,14,12,14,180,9,14,1,14,1,14,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,3,15,193,8,15,1,16,1,16,5,16,197,8,16,10,16,
		12,16,200,9,16,1,17,1,17,1,17,1,17,5,17,206,8,17,10,17,12,17,209,9,17,
		1,17,1,17,1,18,1,18,1,18,1,18,5,18,217,8,18,10,18,12,18,220,9,18,1,18,
		1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
		1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
		1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
		1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
		1,41,1,41,1,41,1,42,1,42,1,218,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,0,27,13,29,14,31,15,33,16,35,17,37,18,39,19,
		41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,27,57,28,59,29,61,30,63,31,
		65,32,67,33,69,34,71,35,73,36,75,37,77,38,79,39,81,40,83,41,85,42,1,0,
		8,3,0,9,10,13,13,32,32,1,0,48,57,6,0,34,34,39,39,92,92,110,110,114,114,
		116,116,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,3,0,65,
		90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,292,0,1,1,
		0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,99,1,0,0,0,5,103,1,0,
		0,0,7,107,1,0,0,0,9,115,1,0,0,0,11,122,1,0,0,0,13,127,1,0,0,0,15,132,1,
		0,0,0,17,135,1,0,0,0,19,141,1,0,0,0,21,148,1,0,0,0,23,153,1,0,0,0,25,163,
		1,0,0,0,27,166,1,0,0,0,29,173,1,0,0,0,31,192,1,0,0,0,33,194,1,0,0,0,35,
		201,1,0,0,0,37,212,1,0,0,0,39,226,1,0,0,0,41,228,1,0,0,0,43,231,1,0,0,
		0,45,233,1,0,0,0,47,235,1,0,0,0,49,237,1,0,0,0,51,239,1,0,0,0,53,241,1,
		0,0,0,55,243,1,0,0,0,57,246,1,0,0,0,59,249,1,0,0,0,61,251,1,0,0,0,63,253,
		1,0,0,0,65,255,1,0,0,0,67,257,1,0,0,0,69,259,1,0,0,0,71,262,1,0,0,0,73,
		265,1,0,0,0,75,267,1,0,0,0,77,270,1,0,0,0,79,273,1,0,0,0,81,276,1,0,0,
		0,83,278,1,0,0,0,85,281,1,0,0,0,87,88,5,102,0,0,88,89,5,109,0,0,89,90,
		5,116,0,0,90,91,5,46,0,0,91,92,5,80,0,0,92,93,5,114,0,0,93,94,5,105,0,
		0,94,95,5,110,0,0,95,96,5,116,0,0,96,97,5,108,0,0,97,98,5,110,0,0,98,2,
		1,0,0,0,99,100,5,118,0,0,100,101,5,97,0,0,101,102,5,114,0,0,102,4,1,0,
		0,0,103,104,5,105,0,0,104,105,5,110,0,0,105,106,5,116,0,0,106,6,1,0,0,
		0,107,108,5,102,0,0,108,109,5,108,0,0,109,110,5,111,0,0,110,111,5,97,0,
		0,111,112,5,116,0,0,112,113,5,54,0,0,113,114,5,52,0,0,114,8,1,0,0,0,115,
		116,5,115,0,0,116,117,5,116,0,0,117,118,5,114,0,0,118,119,5,105,0,0,119,
		120,5,110,0,0,120,121,5,103,0,0,121,10,1,0,0,0,122,123,5,98,0,0,123,124,
		5,111,0,0,124,125,5,111,0,0,125,126,5,108,0,0,126,12,1,0,0,0,127,128,5,
		114,0,0,128,129,5,117,0,0,129,130,5,110,0,0,130,131,5,101,0,0,131,14,1,
		0,0,0,132,133,5,105,0,0,133,134,5,102,0,0,134,16,1,0,0,0,135,136,5,101,
		0,0,136,137,5,108,0,0,137,138,5,115,0,0,138,139,5,101,0,0,139,18,1,0,0,
		0,140,142,7,0,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,0,0,143,
		144,1,0,0,0,144,145,1,0,0,0,145,146,6,9,0,0,146,20,1,0,0,0,147,149,7,1,
		0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,
		22,1,0,0,0,152,154,7,1,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,
		0,0,155,156,1,0,0,0,156,157,1,0,0,0,157,159,5,46,0,0,158,160,7,1,0,0,159,
		158,1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,24,1,0,
		0,0,163,164,5,92,0,0,164,165,7,2,0,0,165,26,1,0,0,0,166,169,5,39,0,0,167,
		170,3,25,12,0,168,170,8,3,0,0,169,167,1,0,0,0,169,168,1,0,0,0,170,171,
		1,0,0,0,171,172,5,39,0,0,172,28,1,0,0,0,173,178,5,34,0,0,174,177,3,25,
		12,0,175,177,8,4,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,
		176,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,181,182,5,
		34,0,0,182,30,1,0,0,0,183,184,5,116,0,0,184,185,5,114,0,0,185,186,5,117,
		0,0,186,193,5,101,0,0,187,188,5,102,0,0,188,189,5,97,0,0,189,190,5,108,
		0,0,190,191,5,115,0,0,191,193,5,101,0,0,192,183,1,0,0,0,192,187,1,0,0,
		0,193,32,1,0,0,0,194,198,7,5,0,0,195,197,7,6,0,0,196,195,1,0,0,0,197,200,
		1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,34,1,0,0,0,200,198,1,0,0,0,
		201,202,5,47,0,0,202,203,5,47,0,0,203,207,1,0,0,0,204,206,8,7,0,0,205,
		204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,210,1,
		0,0,0,209,207,1,0,0,0,210,211,6,17,1,0,211,36,1,0,0,0,212,213,5,47,0,0,
		213,214,5,42,0,0,214,218,1,0,0,0,215,217,9,0,0,0,216,215,1,0,0,0,217,220,
		1,0,0,0,218,219,1,0,0,0,218,216,1,0,0,0,219,221,1,0,0,0,220,218,1,0,0,
		0,221,222,5,42,0,0,222,223,5,47,0,0,223,224,1,0,0,0,224,225,6,18,1,0,225,
		38,1,0,0,0,226,227,5,61,0,0,227,40,1,0,0,0,228,229,5,58,0,0,229,230,5,
		61,0,0,230,42,1,0,0,0,231,232,5,40,0,0,232,44,1,0,0,0,233,234,5,41,0,0,
		234,46,1,0,0,0,235,236,5,91,0,0,236,48,1,0,0,0,237,238,5,93,0,0,238,50,
		1,0,0,0,239,240,5,123,0,0,240,52,1,0,0,0,241,242,5,125,0,0,242,54,1,0,
		0,0,243,244,5,43,0,0,244,245,5,61,0,0,245,56,1,0,0,0,246,247,5,45,0,0,
		247,248,5,61,0,0,248,58,1,0,0,0,249,250,5,43,0,0,250,60,1,0,0,0,251,252,
		5,45,0,0,252,62,1,0,0,0,253,254,5,42,0,0,254,64,1,0,0,0,255,256,5,47,0,
		0,256,66,1,0,0,0,257,258,5,37,0,0,258,68,1,0,0,0,259,260,5,38,0,0,260,
		261,5,38,0,0,261,70,1,0,0,0,262,263,5,124,0,0,263,264,5,124,0,0,264,72,
		1,0,0,0,265,266,5,33,0,0,266,74,1,0,0,0,267,268,5,61,0,0,268,269,5,61,
		0,0,269,76,1,0,0,0,270,271,5,33,0,0,271,272,5,61,0,0,272,78,1,0,0,0,273,
		274,5,62,0,0,274,275,5,61,0,0,275,80,1,0,0,0,276,277,5,62,0,0,277,82,1,
		0,0,0,278,279,5,60,0,0,279,280,5,61,0,0,280,84,1,0,0,0,281,282,5,60,0,
		0,282,86,1,0,0,0,12,0,143,150,155,161,169,176,178,192,198,207,218,2,0,
		1,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
