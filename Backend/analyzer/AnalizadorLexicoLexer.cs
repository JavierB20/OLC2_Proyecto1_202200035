//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AnalizadorLexico.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AnalizadorLexicoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		NEWLINE=25, INT=26, DECIMAL=27, CARACTER=28, CADENA=29, BOOL=30, PALABRA=31, 
		COMENTARIO_LINEA=32, COMENTARIO=33, IGUAL=34, DOSPUNTOS_IGUAL=35, PARENTESIS_ABRE=36, 
		PARENTESIS_CIERRA=37, ASIGNACION_SUMA=38, ASIGNACION_RESTA=39;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "NEWLINE", 
		"INT", "DECIMAL", "CARACTER", "ESC_SEQ", "CADENA", "ESC_SEQCA", "BOOL", 
		"PALABRA", "COMENTARIO_LINEA", "COMENTARIO", "IGUAL", "DOSPUNTOS_IGUAL", 
		"PARENTESIS_ABRE", "PARENTESIS_CIERRA", "ASIGNACION_SUMA", "ASIGNACION_RESTA"
	};


	public AnalizadorLexicoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AnalizadorLexicoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println'", "'var'", "'int'", "'float64'", "'string'", "'bool'", 
		"'rune'", "'if'", "'then'", "'end if'", "'*'", "'/'", "'+'", "'-'", "'%'", 
		"'&&'", "'||'", "'!'", "'=='", "'!='", "'>='", "'>'", "'<='", "'<'", null, 
		null, null, null, null, null, null, null, null, "'='", "':='", "'('", 
		"')'", "'+='", "'-='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "NEWLINE", "INT", "DECIMAL", "CARACTER", "CADENA", "BOOL", "PALABRA", 
		"COMENTARIO_LINEA", "COMENTARIO", "IGUAL", "DOSPUNTOS_IGUAL", "PARENTESIS_ABRE", 
		"PARENTESIS_CIERRA", "ASIGNACION_SUMA", "ASIGNACION_RESTA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnalizadorLexico.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorLexicoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,39,289,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
		15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,
		20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,4,24,179,8,24,11,24,12,
		24,180,1,24,1,24,1,25,4,25,186,8,25,11,25,12,25,187,1,26,4,26,191,8,26,
		11,26,12,26,192,1,26,1,26,4,26,197,8,26,11,26,12,26,198,1,27,1,27,1,27,
		3,27,204,8,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,5,29,214,8,29,10,
		29,12,29,217,9,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,3,31,233,8,31,1,32,4,32,236,8,32,11,32,12,32,237,1,32,
		3,32,241,8,32,1,32,4,32,244,8,32,11,32,12,32,245,3,32,248,8,32,1,33,1,
		33,1,33,1,33,5,33,254,8,33,10,33,12,33,257,9,33,1,33,1,33,1,34,1,34,1,
		34,1,34,5,34,265,8,34,10,34,12,34,268,9,34,1,34,1,34,1,34,1,34,1,34,1,
		35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,
		40,1,266,0,41,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
		49,25,51,26,53,27,55,28,57,0,59,29,61,0,63,30,65,31,67,32,69,33,71,34,
		73,35,75,36,77,37,79,38,81,39,1,0,8,3,0,9,10,13,13,32,32,1,0,48,57,4,0,
		10,10,13,13,39,39,92,92,6,0,39,39,92,92,98,98,110,110,114,114,116,116,
		4,0,10,10,13,13,34,34,92,92,8,0,34,34,47,47,92,92,98,98,102,102,110,110,
		114,114,116,116,2,0,65,90,97,122,2,0,10,10,13,13,300,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,59,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,83,1,0,0,
		0,3,95,1,0,0,0,5,99,1,0,0,0,7,103,1,0,0,0,9,111,1,0,0,0,11,118,1,0,0,0,
		13,123,1,0,0,0,15,128,1,0,0,0,17,131,1,0,0,0,19,136,1,0,0,0,21,143,1,0,
		0,0,23,145,1,0,0,0,25,147,1,0,0,0,27,149,1,0,0,0,29,151,1,0,0,0,31,153,
		1,0,0,0,33,156,1,0,0,0,35,159,1,0,0,0,37,161,1,0,0,0,39,164,1,0,0,0,41,
		167,1,0,0,0,43,170,1,0,0,0,45,172,1,0,0,0,47,175,1,0,0,0,49,178,1,0,0,
		0,51,185,1,0,0,0,53,190,1,0,0,0,55,200,1,0,0,0,57,207,1,0,0,0,59,210,1,
		0,0,0,61,220,1,0,0,0,63,232,1,0,0,0,65,235,1,0,0,0,67,249,1,0,0,0,69,260,
		1,0,0,0,71,274,1,0,0,0,73,276,1,0,0,0,75,279,1,0,0,0,77,281,1,0,0,0,79,
		283,1,0,0,0,81,286,1,0,0,0,83,84,5,102,0,0,84,85,5,109,0,0,85,86,5,116,
		0,0,86,87,5,46,0,0,87,88,5,80,0,0,88,89,5,114,0,0,89,90,5,105,0,0,90,91,
		5,110,0,0,91,92,5,116,0,0,92,93,5,108,0,0,93,94,5,110,0,0,94,2,1,0,0,0,
		95,96,5,118,0,0,96,97,5,97,0,0,97,98,5,114,0,0,98,4,1,0,0,0,99,100,5,105,
		0,0,100,101,5,110,0,0,101,102,5,116,0,0,102,6,1,0,0,0,103,104,5,102,0,
		0,104,105,5,108,0,0,105,106,5,111,0,0,106,107,5,97,0,0,107,108,5,116,0,
		0,108,109,5,54,0,0,109,110,5,52,0,0,110,8,1,0,0,0,111,112,5,115,0,0,112,
		113,5,116,0,0,113,114,5,114,0,0,114,115,5,105,0,0,115,116,5,110,0,0,116,
		117,5,103,0,0,117,10,1,0,0,0,118,119,5,98,0,0,119,120,5,111,0,0,120,121,
		5,111,0,0,121,122,5,108,0,0,122,12,1,0,0,0,123,124,5,114,0,0,124,125,5,
		117,0,0,125,126,5,110,0,0,126,127,5,101,0,0,127,14,1,0,0,0,128,129,5,105,
		0,0,129,130,5,102,0,0,130,16,1,0,0,0,131,132,5,116,0,0,132,133,5,104,0,
		0,133,134,5,101,0,0,134,135,5,110,0,0,135,18,1,0,0,0,136,137,5,101,0,0,
		137,138,5,110,0,0,138,139,5,100,0,0,139,140,5,32,0,0,140,141,5,105,0,0,
		141,142,5,102,0,0,142,20,1,0,0,0,143,144,5,42,0,0,144,22,1,0,0,0,145,146,
		5,47,0,0,146,24,1,0,0,0,147,148,5,43,0,0,148,26,1,0,0,0,149,150,5,45,0,
		0,150,28,1,0,0,0,151,152,5,37,0,0,152,30,1,0,0,0,153,154,5,38,0,0,154,
		155,5,38,0,0,155,32,1,0,0,0,156,157,5,124,0,0,157,158,5,124,0,0,158,34,
		1,0,0,0,159,160,5,33,0,0,160,36,1,0,0,0,161,162,5,61,0,0,162,163,5,61,
		0,0,163,38,1,0,0,0,164,165,5,33,0,0,165,166,5,61,0,0,166,40,1,0,0,0,167,
		168,5,62,0,0,168,169,5,61,0,0,169,42,1,0,0,0,170,171,5,62,0,0,171,44,1,
		0,0,0,172,173,5,60,0,0,173,174,5,61,0,0,174,46,1,0,0,0,175,176,5,60,0,
		0,176,48,1,0,0,0,177,179,7,0,0,0,178,177,1,0,0,0,179,180,1,0,0,0,180,178,
		1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,183,6,24,0,0,183,50,1,0,0,
		0,184,186,7,1,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,
		188,1,0,0,0,188,52,1,0,0,0,189,191,7,1,0,0,190,189,1,0,0,0,191,192,1,0,
		0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,196,5,46,0,0,195,
		197,7,1,0,0,196,195,1,0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,
		0,0,0,199,54,1,0,0,0,200,203,5,39,0,0,201,204,3,57,28,0,202,204,8,2,0,
		0,203,201,1,0,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,206,5,39,0,0,206,
		56,1,0,0,0,207,208,5,92,0,0,208,209,7,3,0,0,209,58,1,0,0,0,210,215,5,34,
		0,0,211,214,3,61,30,0,212,214,8,4,0,0,213,211,1,0,0,0,213,212,1,0,0,0,
		214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,215,
		1,0,0,0,218,219,5,34,0,0,219,60,1,0,0,0,220,221,5,92,0,0,221,222,7,5,0,
		0,222,62,1,0,0,0,223,224,5,116,0,0,224,225,5,114,0,0,225,226,5,117,0,0,
		226,233,5,101,0,0,227,228,5,102,0,0,228,229,5,97,0,0,229,230,5,108,0,0,
		230,231,5,115,0,0,231,233,5,101,0,0,232,223,1,0,0,0,232,227,1,0,0,0,233,
		64,1,0,0,0,234,236,7,6,0,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,
		0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,241,5,95,0,0,240,239,1,0,0,0,240,
		241,1,0,0,0,241,247,1,0,0,0,242,244,7,1,0,0,243,242,1,0,0,0,244,245,1,
		0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,243,1,0,0,0,
		247,248,1,0,0,0,248,66,1,0,0,0,249,250,5,47,0,0,250,251,5,47,0,0,251,255,
		1,0,0,0,252,254,8,7,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,
		0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,259,6,33,1,0,259,
		68,1,0,0,0,260,261,5,47,0,0,261,262,5,42,0,0,262,266,1,0,0,0,263,265,9,
		0,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,267,1,0,0,0,266,264,1,0,0,0,
		267,269,1,0,0,0,268,266,1,0,0,0,269,270,5,42,0,0,270,271,5,47,0,0,271,
		272,1,0,0,0,272,273,6,34,1,0,273,70,1,0,0,0,274,275,5,61,0,0,275,72,1,
		0,0,0,276,277,5,58,0,0,277,278,5,61,0,0,278,74,1,0,0,0,279,280,5,40,0,
		0,280,76,1,0,0,0,281,282,5,41,0,0,282,78,1,0,0,0,283,284,5,43,0,0,284,
		285,5,61,0,0,285,80,1,0,0,0,286,287,5,45,0,0,287,288,5,61,0,0,288,82,1,
		0,0,0,15,0,180,187,192,198,203,213,215,232,237,240,245,247,255,266,2,0,
		1,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
