//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AnalizadorLexico.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AnalizadorLexicoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, NEWLINE=16, 
		INT=17, DECIMAL=18, CARACTER=19, CADENA=20, BOOL=21, ID=22, COMENTARIO_LINEA=23, 
		COMENTARIO_BLOQUE=24, IGUAL=25, DOSPUNTOS_IGUAL=26, PARENTESIS_ABRE=27, 
		PARENTESIS_CIERRA=28, CORCHETE_ABRE=29, CORCHETE_CIERRA=30, LLAVE_ABRE=31, 
		LLAVE_CIERRA=32, ASIGNACION_SUMA=33, ASIGNACION_RESTA=34, MAS=35, MENOS=36, 
		MULT=37, DIV=38, MODULO=39, Y_LOGICO=40, O_LOGICO=41, NEGACION=42, IGUAL_IGUAL=43, 
		DIFERENTE=44, MAYOR_IGUAL=45, MAYOR=46, MENOR_IGUAL=47, MENOR=48, INCREMENTO=49, 
		DECREMENTO=50;
	public const int
		RULE_inicio = 0, RULE_listainstrucciones = 1, RULE_instruccion = 2, RULE_print = 3, 
		RULE_variables = 4, RULE_asignacion = 5, RULE_incrementoDecremento = 6, 
		RULE_instruccion_for = 7, RULE_instruccion_forcondicional = 8, RULE_tipo = 9, 
		RULE_instruccion_if = 10, RULE_instruccion_switch = 11, RULE_caso = 12, 
		RULE_caso_default = 13, RULE_expr = 14;
	public static readonly string[] ruleNames = {
		"inicio", "listainstrucciones", "instruccion", "print", "variables", "asignacion", 
		"incrementoDecremento", "instruccion_for", "instruccion_forcondicional", 
		"tipo", "instruccion_if", "instruccion_switch", "caso", "caso_default", 
		"expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println'", "'var'", "'for'", "';'", "'int'", "'float64'", 
		"'string'", "'bool'", "'rune'", "'if'", "'else'", "'switch'", "'case'", 
		"':'", "'default'", null, null, null, null, null, null, null, null, null, 
		"'='", "':='", "'('", "')'", "'['", "']'", "'{'", "'}'", "'+='", "'-='", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'=='", "'!='", 
		"'>='", "'>'", "'<='", "'<'", "'++'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "NEWLINE", "INT", "DECIMAL", "CARACTER", "CADENA", 
		"BOOL", "ID", "COMENTARIO_LINEA", "COMENTARIO_BLOQUE", "IGUAL", "DOSPUNTOS_IGUAL", 
		"PARENTESIS_ABRE", "PARENTESIS_CIERRA", "CORCHETE_ABRE", "CORCHETE_CIERRA", 
		"LLAVE_ABRE", "LLAVE_CIERRA", "ASIGNACION_SUMA", "ASIGNACION_RESTA", "MAS", 
		"MENOS", "MULT", "DIV", "MODULO", "Y_LOGICO", "O_LOGICO", "NEGACION", 
		"IGUAL_IGUAL", "DIFERENTE", "MAYOR_IGUAL", "MAYOR", "MENOR_IGUAL", "MENOR", 
		"INCREMENTO", "DECREMENTO"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnalizadorLexico.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorLexicoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AnalizadorLexicoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AnalizadorLexicoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InicioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListainstruccionesContext listainstrucciones() {
			return GetRuleContext<ListainstruccionesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AnalizadorLexicoParser.Eof, 0); }
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(Context, State);
		EnterRule(_localctx, 0, RULE_inicio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			listainstrucciones();
			State = 31;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListainstruccionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext[] instruccion() {
			return GetRuleContexts<InstruccionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext instruccion(int i) {
			return GetRuleContext<InstruccionContext>(i);
		}
		public ListainstruccionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listainstrucciones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterListainstrucciones(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitListainstrucciones(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListainstrucciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListainstruccionesContext listainstrucciones() {
		ListainstruccionesContext _localctx = new ListainstruccionesContext(Context, State);
		EnterRule(_localctx, 2, RULE_listainstrucciones);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4199438L) != 0)) {
				{
				{
				State = 33;
				instruccion();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext variables() {
			return GetRuleContext<VariablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion() {
			return GetRuleContext<AsignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_ifContext instruccion_if() {
			return GetRuleContext<Instruccion_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_switchContext instruccion_switch() {
			return GetRuleContext<Instruccion_switchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementoDecrementoContext incrementoDecremento() {
			return GetRuleContext<IncrementoDecrementoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_forContext instruccion_for() {
			return GetRuleContext<Instruccion_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_forcondicionalContext instruccion_forcondicional() {
			return GetRuleContext<Instruccion_forcondicionalContext>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(Context, State);
		EnterRule(_localctx, 4, RULE_instruccion);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				print();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				variables();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 41;
				asignacion();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 42;
				instruccion_if();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 43;
				instruccion_switch();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 44;
				incrementoDecremento();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 45;
				instruccion_for();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 46;
				instruccion_forcondicional();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorLexicoParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorLexicoParser.PARENTESIS_CIERRA, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 6, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(T__0);
			State = 50;
			Match(PARENTESIS_ABRE);
			State = 51;
			expr(0);
			State = 52;
			Match(PARENTESIS_CIERRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesContext : ParserRuleContext {
		public VariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variables; } }
	 
		public VariablesContext() { }
		public virtual void CopyFrom(VariablesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionVarContext : VariablesContext {
		public IToken identificador;
		public TipoContext tipoVar;
		public ExprContext valor;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorLexicoParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclaracionVarContext(VariablesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterDeclaracionVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitDeclaracionVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablesContext variables() {
		VariablesContext _localctx = new VariablesContext(Context, State);
		EnterRule(_localctx, 8, RULE_variables);
		int _la;
		try {
			_localctx = new DeclaracionVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(T__1);
			State = 55;
			((DeclaracionVarContext)_localctx).identificador = Match(ID);
			State = 56;
			((DeclaracionVarContext)_localctx).tipoVar = tipo();
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGUAL) {
				{
				State = 57;
				Match(IGUAL);
				State = 58;
				((DeclaracionVarContext)_localctx).valor = expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignacionContext : ParserRuleContext {
		public AsignacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignacion; } }
	 
		public AsignacionContext() { }
		public virtual void CopyFrom(AsignacionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AsignacionVarContext : AsignacionContext {
		public IToken signo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorLexicoParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUNTOS_IGUAL() { return GetToken(AnalizadorLexicoParser.DOSPUNTOS_IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACION_SUMA() { return GetToken(AnalizadorLexicoParser.ASIGNACION_SUMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNACION_RESTA() { return GetToken(AnalizadorLexicoParser.ASIGNACION_RESTA, 0); }
		public AsignacionVarContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterAsignacionVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitAsignacionVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignacionContext asignacion() {
		AsignacionContext _localctx = new AsignacionContext(Context, State);
		EnterRule(_localctx, 10, RULE_asignacion);
		int _la;
		try {
			_localctx = new AsignacionVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(ID);
			State = 62;
			((AsignacionVarContext)_localctx).signo = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 25870467072L) != 0)) ) {
				((AsignacionVarContext)_localctx).signo = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 63;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementoDecrementoContext : ParserRuleContext {
		public IncrementoDecrementoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementoDecremento; } }
	 
		public IncrementoDecrementoContext() { }
		public virtual void CopyFrom(IncrementoDecrementoContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IncrementoDecrementoInstruccionContext : IncrementoDecrementoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTO() { return GetToken(AnalizadorLexicoParser.INCREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTO() { return GetToken(AnalizadorLexicoParser.DECREMENTO, 0); }
		public IncrementoDecrementoInstruccionContext(IncrementoDecrementoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterIncrementoDecrementoInstruccion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitIncrementoDecrementoInstruccion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementoDecrementoInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementoDecrementoContext incrementoDecremento() {
		IncrementoDecrementoContext _localctx = new IncrementoDecrementoContext(Context, State);
		EnterRule(_localctx, 12, RULE_incrementoDecremento);
		int _la;
		try {
			_localctx = new IncrementoDecrementoInstruccionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(ID);
			State = 66;
			_la = TokenStream.LA(1);
			if ( !(_la==INCREMENTO || _la==DECREMENTO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_ABRE() { return GetToken(AnalizadorLexicoParser.LLAVE_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListainstruccionesContext listainstrucciones() {
			return GetRuleContext<ListainstruccionesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_CIERRA() { return GetToken(AnalizadorLexicoParser.LLAVE_CIERRA, 0); }
		public Instruccion_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_for(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_forContext instruccion_for() {
		Instruccion_forContext _localctx = new Instruccion_forContext(Context, State);
		EnterRule(_localctx, 14, RULE_instruccion_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__2);
			State = 69;
			expr(0);
			State = 70;
			Match(LLAVE_ABRE);
			State = 71;
			listainstrucciones();
			State = 72;
			Match(LLAVE_CIERRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_forcondicionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion() {
			return GetRuleContext<AsignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementoDecrementoContext incrementoDecremento() {
			return GetRuleContext<IncrementoDecrementoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_ABRE() { return GetToken(AnalizadorLexicoParser.LLAVE_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListainstruccionesContext listainstrucciones() {
			return GetRuleContext<ListainstruccionesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_CIERRA() { return GetToken(AnalizadorLexicoParser.LLAVE_CIERRA, 0); }
		public Instruccion_forcondicionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_forcondicional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_forcondicional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_forcondicional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_forcondicional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_forcondicionalContext instruccion_forcondicional() {
		Instruccion_forcondicionalContext _localctx = new Instruccion_forcondicionalContext(Context, State);
		EnterRule(_localctx, 16, RULE_instruccion_forcondicional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__2);
			State = 75;
			asignacion();
			State = 76;
			Match(T__3);
			State = 77;
			expr(0);
			State = 78;
			Match(T__3);
			State = 79;
			incrementoDecremento();
			State = 80;
			Match(LLAVE_ABRE);
			State = 81;
			listainstrucciones();
			State = 82;
			Match(LLAVE_CIERRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 18, RULE_tipo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 992L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorLexicoParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorLexicoParser.PARENTESIS_CIERRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LLAVE_ABRE() { return GetTokens(AnalizadorLexicoParser.LLAVE_ABRE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_ABRE(int i) {
			return GetToken(AnalizadorLexicoParser.LLAVE_ABRE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListainstruccionesContext[] listainstrucciones() {
			return GetRuleContexts<ListainstruccionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListainstruccionesContext listainstrucciones(int i) {
			return GetRuleContext<ListainstruccionesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LLAVE_CIERRA() { return GetTokens(AnalizadorLexicoParser.LLAVE_CIERRA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_CIERRA(int i) {
			return GetToken(AnalizadorLexicoParser.LLAVE_CIERRA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_ifContext instruccion_if() {
			return GetRuleContext<Instruccion_ifContext>(0);
		}
		public Instruccion_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_ifContext instruccion_if() {
		Instruccion_ifContext _localctx = new Instruccion_ifContext(Context, State);
		EnterRule(_localctx, 20, RULE_instruccion_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__9);
			State = 87;
			Match(PARENTESIS_ABRE);
			State = 88;
			expr(0);
			State = 89;
			Match(PARENTESIS_CIERRA);
			State = 90;
			Match(LLAVE_ABRE);
			State = 91;
			listainstrucciones();
			State = 92;
			Match(LLAVE_CIERRA);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 93;
				Match(T__10);
				State = 99;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__9:
					{
					State = 94;
					instruccion_if();
					}
					break;
				case LLAVE_ABRE:
					{
					State = 95;
					Match(LLAVE_ABRE);
					State = 96;
					listainstrucciones();
					State = 97;
					Match(LLAVE_CIERRA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_switchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_ABRE() { return GetToken(AnalizadorLexicoParser.LLAVE_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_CIERRA() { return GetToken(AnalizadorLexicoParser.LLAVE_CIERRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CasoContext[] caso() {
			return GetRuleContexts<CasoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CasoContext caso(int i) {
			return GetRuleContext<CasoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Caso_defaultContext caso_default() {
			return GetRuleContext<Caso_defaultContext>(0);
		}
		public Instruccion_switchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_switch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_switch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_switch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_switchContext instruccion_switch() {
		Instruccion_switchContext _localctx = new Instruccion_switchContext(Context, State);
		EnterRule(_localctx, 22, RULE_instruccion_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__11);
			State = 104;
			expr(0);
			State = 105;
			Match(LLAVE_ABRE);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 106;
				caso();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 112;
				caso_default();
				}
			}

			State = 115;
			Match(LLAVE_CIERRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CasoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListainstruccionesContext listainstrucciones() {
			return GetRuleContext<ListainstruccionesContext>(0);
		}
		public CasoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caso; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterCaso(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitCaso(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaso(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CasoContext caso() {
		CasoContext _localctx = new CasoContext(Context, State);
		EnterRule(_localctx, 24, RULE_caso);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(T__12);
			State = 118;
			expr(0);
			State = 119;
			Match(T__13);
			State = 120;
			listainstrucciones();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Caso_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListainstruccionesContext listainstrucciones() {
			return GetRuleContext<ListainstruccionesContext>(0);
		}
		public Caso_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caso_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterCaso_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitCaso_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaso_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Caso_defaultContext caso_default() {
		Caso_defaultContext _localctx = new Caso_defaultContext(Context, State);
		EnterRule(_localctx, 26, RULE_caso_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(T__14);
			State = 123;
			Match(T__13);
			State = 124;
			listainstrucciones();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperadorLogicoContext : ExprContext {
		public ExprContext left;
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Y_LOGICO() { return GetToken(AnalizadorLexicoParser.Y_LOGICO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode O_LOGICO() { return GetToken(AnalizadorLexicoParser.O_LOGICO, 0); }
		public OperadorLogicoContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterOperadorLogico(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitOperadorLogico(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperadorLogico(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpreParentesisContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_ABRE() { return GetToken(AnalizadorLexicoParser.PARENTESIS_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_CIERRA() { return GetToken(AnalizadorLexicoParser.PARENTESIS_CIERRA, 0); }
		public ExpreParentesisContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterExpreParentesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitExpreParentesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpreParentesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		public IdExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterIdExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitIdExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperadorNegacionContext : ExprContext {
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGACION() { return GetToken(AnalizadorLexicoParser.NEGACION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OperadorNegacionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterOperadorNegacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitOperadorNegacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperadorNegacion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaracterExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARACTER() { return GetToken(AnalizadorLexicoParser.CARACTER, 0); }
		public CaracterExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterCaracterExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitCaracterExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracterExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(AnalizadorLexicoParser.DECIMAL, 0); }
		public DecimalExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterDecimalExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitDecimalExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoleanExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AnalizadorLexicoParser.BOOL, 0); }
		public BoleanExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterBoleanExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitBoleanExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoleanExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CadenaExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CADENA() { return GetToken(AnalizadorLexicoParser.CADENA, 0); }
		public CadenaExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterCadenaExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitCadenaExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCadenaExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpreCorchetesContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_ABRE() { return GetToken(AnalizadorLexicoParser.CORCHETE_ABRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORCHETE_CIERRA() { return GetToken(AnalizadorLexicoParser.CORCHETE_CIERRA, 0); }
		public ExpreCorchetesContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterExpreCorchetes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitExpreCorchetes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpreCorchetes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicacionYdivisionContext : ExprContext {
		public ExprContext left;
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(AnalizadorLexicoParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(AnalizadorLexicoParser.DIV, 0); }
		public MultiplicacionYdivisionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterMultiplicacionYdivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitMultiplicacionYdivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicacionYdivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AnalizadorLexicoParser.INT, 0); }
		public IntExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterIntExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitIntExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperadorRelacionalContext : ExprContext {
		public ExprContext left;
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR() { return GetToken(AnalizadorLexicoParser.MENOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR_IGUAL() { return GetToken(AnalizadorLexicoParser.MENOR_IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR() { return GetToken(AnalizadorLexicoParser.MAYOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR_IGUAL() { return GetToken(AnalizadorLexicoParser.MAYOR_IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL_IGUAL() { return GetToken(AnalizadorLexicoParser.IGUAL_IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFERENTE() { return GetToken(AnalizadorLexicoParser.DIFERENTE, 0); }
		public OperadorRelacionalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterOperadorRelacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitOperadorRelacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperadorRelacional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperadorNegativoContext : ExprContext {
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOS() { return GetToken(AnalizadorLexicoParser.MENOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OperadorNegativoContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterOperadorNegativo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitOperadorNegativo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperadorNegativo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumaYrestaContext : ExprContext {
		public ExprContext left;
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAS() { return GetToken(AnalizadorLexicoParser.MAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOS() { return GetToken(AnalizadorLexicoParser.MENOS, 0); }
		public SumaYrestaContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterSumaYresta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitSumaYresta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumaYresta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloContext : ExprContext {
		public ExprContext left;
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(AnalizadorLexicoParser.MODULO, 0); }
		public ModuloContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARENTESIS_ABRE:
				{
				_localctx = new ExpreParentesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 127;
				Match(PARENTESIS_ABRE);
				State = 128;
				expr(0);
				State = 129;
				Match(PARENTESIS_CIERRA);
				}
				break;
			case CORCHETE_ABRE:
				{
				_localctx = new ExpreCorchetesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131;
				Match(CORCHETE_ABRE);
				State = 132;
				expr(0);
				State = 133;
				Match(CORCHETE_CIERRA);
				}
				break;
			case MENOS:
				{
				_localctx = new OperadorNegativoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 135;
				((OperadorNegativoContext)_localctx).operador = Match(MENOS);
				State = 136;
				((OperadorNegativoContext)_localctx).right = expr(19);
				}
				break;
			case NEGACION:
				{
				_localctx = new OperadorNegacionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137;
				((OperadorNegacionContext)_localctx).operador = Match(NEGACION);
				State = 138;
				((OperadorNegacionContext)_localctx).right = expr(18);
				}
				break;
			case INT:
				{
				_localctx = new IntExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 139;
				Match(INT);
				}
				break;
			case DECIMAL:
				{
				_localctx = new DecimalExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 140;
				Match(DECIMAL);
				}
				break;
			case CARACTER:
				{
				_localctx = new CaracterExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 141;
				Match(CARACTER);
				}
				break;
			case BOOL:
				{
				_localctx = new BoleanExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 142;
				Match(BOOL);
				}
				break;
			case CADENA:
				{
				_localctx = new CadenaExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 143;
				Match(CADENA);
				}
				break;
			case ID:
				{
				_localctx = new IdExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 144;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 180;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new MultiplicacionYdivisionContext(new ExprContext(_parentctx, _parentState));
						((MultiplicacionYdivisionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 147;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 148;
						((MultiplicacionYdivisionContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((MultiplicacionYdivisionContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 149;
						((MultiplicacionYdivisionContext)_localctx).right = expr(18);
						}
						break;
					case 2:
						{
						_localctx = new ModuloContext(new ExprContext(_parentctx, _parentState));
						((ModuloContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 150;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 151;
						((ModuloContext)_localctx).operador = Match(MODULO);
						State = 152;
						((ModuloContext)_localctx).right = expr(17);
						}
						break;
					case 3:
						{
						_localctx = new SumaYrestaContext(new ExprContext(_parentctx, _parentState));
						((SumaYrestaContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 153;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 154;
						((SumaYrestaContext)_localctx).operador = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MAS || _la==MENOS) ) {
							((SumaYrestaContext)_localctx).operador = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 155;
						((SumaYrestaContext)_localctx).right = expr(16);
						}
						break;
					case 4:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 156;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 157;
						((OperadorRelacionalContext)_localctx).operador = Match(MENOR);
						State = 158;
						((OperadorRelacionalContext)_localctx).right = expr(15);
						}
						break;
					case 5:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 159;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 160;
						((OperadorRelacionalContext)_localctx).operador = Match(MENOR_IGUAL);
						State = 161;
						((OperadorRelacionalContext)_localctx).right = expr(14);
						}
						break;
					case 6:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 162;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 163;
						((OperadorRelacionalContext)_localctx).operador = Match(MAYOR);
						State = 164;
						((OperadorRelacionalContext)_localctx).right = expr(13);
						}
						break;
					case 7:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 165;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 166;
						((OperadorRelacionalContext)_localctx).operador = Match(MAYOR_IGUAL);
						State = 167;
						((OperadorRelacionalContext)_localctx).right = expr(12);
						}
						break;
					case 8:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 168;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 169;
						((OperadorRelacionalContext)_localctx).operador = Match(IGUAL_IGUAL);
						State = 170;
						((OperadorRelacionalContext)_localctx).right = expr(11);
						}
						break;
					case 9:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 171;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 172;
						((OperadorRelacionalContext)_localctx).operador = Match(DIFERENTE);
						State = 173;
						((OperadorRelacionalContext)_localctx).right = expr(10);
						}
						break;
					case 10:
						{
						_localctx = new OperadorLogicoContext(new ExprContext(_parentctx, _parentState));
						((OperadorLogicoContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 174;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 175;
						((OperadorLogicoContext)_localctx).operador = Match(Y_LOGICO);
						State = 176;
						((OperadorLogicoContext)_localctx).right = expr(9);
						}
						break;
					case 11:
						{
						_localctx = new OperadorLogicoContext(new ExprContext(_parentctx, _parentState));
						((OperadorLogicoContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 177;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 178;
						((OperadorLogicoContext)_localctx).operador = Match(O_LOGICO);
						State = 179;
						((OperadorLogicoContext)_localctx).right = expr(8);
						}
						break;
					}
					} 
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 17);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,50,186,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,1,0,1,0,1,1,5,1,35,8,1,10,1,12,1,38,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,3,2,48,8,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,60,8,4,1,
		5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,3,10,100,8,10,3,10,102,8,10,1,11,1,11,1,11,1,11,
		5,11,108,8,11,10,11,12,11,111,9,11,1,11,3,11,114,8,11,1,11,1,11,1,12,1,
		12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,146,
		8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,5,14,181,8,14,10,14,12,14,184,9,14,1,14,
		0,1,28,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,0,5,2,0,25,26,33,34,
		1,0,49,50,1,0,5,9,1,0,37,38,1,0,35,36,203,0,30,1,0,0,0,2,36,1,0,0,0,4,
		47,1,0,0,0,6,49,1,0,0,0,8,54,1,0,0,0,10,61,1,0,0,0,12,65,1,0,0,0,14,68,
		1,0,0,0,16,74,1,0,0,0,18,84,1,0,0,0,20,86,1,0,0,0,22,103,1,0,0,0,24,117,
		1,0,0,0,26,122,1,0,0,0,28,145,1,0,0,0,30,31,3,2,1,0,31,32,5,0,0,1,32,1,
		1,0,0,0,33,35,3,4,2,0,34,33,1,0,0,0,35,38,1,0,0,0,36,34,1,0,0,0,36,37,
		1,0,0,0,37,3,1,0,0,0,38,36,1,0,0,0,39,48,3,6,3,0,40,48,3,8,4,0,41,48,3,
		10,5,0,42,48,3,20,10,0,43,48,3,22,11,0,44,48,3,12,6,0,45,48,3,14,7,0,46,
		48,3,16,8,0,47,39,1,0,0,0,47,40,1,0,0,0,47,41,1,0,0,0,47,42,1,0,0,0,47,
		43,1,0,0,0,47,44,1,0,0,0,47,45,1,0,0,0,47,46,1,0,0,0,48,5,1,0,0,0,49,50,
		5,1,0,0,50,51,5,27,0,0,51,52,3,28,14,0,52,53,5,28,0,0,53,7,1,0,0,0,54,
		55,5,2,0,0,55,56,5,22,0,0,56,59,3,18,9,0,57,58,5,25,0,0,58,60,3,28,14,
		0,59,57,1,0,0,0,59,60,1,0,0,0,60,9,1,0,0,0,61,62,5,22,0,0,62,63,7,0,0,
		0,63,64,3,28,14,0,64,11,1,0,0,0,65,66,5,22,0,0,66,67,7,1,0,0,67,13,1,0,
		0,0,68,69,5,3,0,0,69,70,3,28,14,0,70,71,5,31,0,0,71,72,3,2,1,0,72,73,5,
		32,0,0,73,15,1,0,0,0,74,75,5,3,0,0,75,76,3,10,5,0,76,77,5,4,0,0,77,78,
		3,28,14,0,78,79,5,4,0,0,79,80,3,12,6,0,80,81,5,31,0,0,81,82,3,2,1,0,82,
		83,5,32,0,0,83,17,1,0,0,0,84,85,7,2,0,0,85,19,1,0,0,0,86,87,5,10,0,0,87,
		88,5,27,0,0,88,89,3,28,14,0,89,90,5,28,0,0,90,91,5,31,0,0,91,92,3,2,1,
		0,92,101,5,32,0,0,93,99,5,11,0,0,94,100,3,20,10,0,95,96,5,31,0,0,96,97,
		3,2,1,0,97,98,5,32,0,0,98,100,1,0,0,0,99,94,1,0,0,0,99,95,1,0,0,0,100,
		102,1,0,0,0,101,93,1,0,0,0,101,102,1,0,0,0,102,21,1,0,0,0,103,104,5,12,
		0,0,104,105,3,28,14,0,105,109,5,31,0,0,106,108,3,24,12,0,107,106,1,0,0,
		0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,113,1,0,0,0,111,
		109,1,0,0,0,112,114,3,26,13,0,113,112,1,0,0,0,113,114,1,0,0,0,114,115,
		1,0,0,0,115,116,5,32,0,0,116,23,1,0,0,0,117,118,5,13,0,0,118,119,3,28,
		14,0,119,120,5,14,0,0,120,121,3,2,1,0,121,25,1,0,0,0,122,123,5,15,0,0,
		123,124,5,14,0,0,124,125,3,2,1,0,125,27,1,0,0,0,126,127,6,14,-1,0,127,
		128,5,27,0,0,128,129,3,28,14,0,129,130,5,28,0,0,130,146,1,0,0,0,131,132,
		5,29,0,0,132,133,3,28,14,0,133,134,5,30,0,0,134,146,1,0,0,0,135,136,5,
		36,0,0,136,146,3,28,14,19,137,138,5,42,0,0,138,146,3,28,14,18,139,146,
		5,17,0,0,140,146,5,18,0,0,141,146,5,19,0,0,142,146,5,21,0,0,143,146,5,
		20,0,0,144,146,5,22,0,0,145,126,1,0,0,0,145,131,1,0,0,0,145,135,1,0,0,
		0,145,137,1,0,0,0,145,139,1,0,0,0,145,140,1,0,0,0,145,141,1,0,0,0,145,
		142,1,0,0,0,145,143,1,0,0,0,145,144,1,0,0,0,146,182,1,0,0,0,147,148,10,
		17,0,0,148,149,7,3,0,0,149,181,3,28,14,18,150,151,10,16,0,0,151,152,5,
		39,0,0,152,181,3,28,14,17,153,154,10,15,0,0,154,155,7,4,0,0,155,181,3,
		28,14,16,156,157,10,14,0,0,157,158,5,48,0,0,158,181,3,28,14,15,159,160,
		10,13,0,0,160,161,5,47,0,0,161,181,3,28,14,14,162,163,10,12,0,0,163,164,
		5,46,0,0,164,181,3,28,14,13,165,166,10,11,0,0,166,167,5,45,0,0,167,181,
		3,28,14,12,168,169,10,10,0,0,169,170,5,43,0,0,170,181,3,28,14,11,171,172,
		10,9,0,0,172,173,5,44,0,0,173,181,3,28,14,10,174,175,10,8,0,0,175,176,
		5,40,0,0,176,181,3,28,14,9,177,178,10,7,0,0,178,179,5,41,0,0,179,181,3,
		28,14,8,180,147,1,0,0,0,180,150,1,0,0,0,180,153,1,0,0,0,180,156,1,0,0,
		0,180,159,1,0,0,0,180,162,1,0,0,0,180,165,1,0,0,0,180,168,1,0,0,0,180,
		171,1,0,0,0,180,174,1,0,0,0,180,177,1,0,0,0,181,184,1,0,0,0,182,180,1,
		0,0,0,182,183,1,0,0,0,183,29,1,0,0,0,184,182,1,0,0,0,10,36,47,59,99,101,
		109,113,145,180,182
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
